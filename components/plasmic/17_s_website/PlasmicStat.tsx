// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eyT2PqiWhxDZs7CQ7z9Crs
// Component: Ej8Oq67_Ed88

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: eyT2PqiWhxDZs7CQ7z9Crs/projectcss
import sty from "./PlasmicStat.module.css"; // plasmic-import: Ej8Oq67_Ed88/css

import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: EyW3icOlju90/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: s8JAaJslkzyN/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: BaXwQvr6aeEs/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: -whbC82JKatU/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: C9dYzNuRLeWc/icon

createPlasmicElementProxy;

export type PlasmicStat__VariantMembers = {
  display: "one" | "two" | "three" | "four";
};
export type PlasmicStat__VariantsArgs = {
  display?: SingleChoiceArg<"one" | "two" | "three" | "four">;
};
type VariantPropType = keyof PlasmicStat__VariantsArgs;
export const PlasmicStat__VariantProps = new Array<VariantPropType>("display");

export type PlasmicStat__ArgsType = {
  statTitle?: string;
  statDescription?: string;
};
type ArgPropType = keyof PlasmicStat__ArgsType;
export const PlasmicStat__ArgProps = new Array<ArgPropType>(
  "statTitle",
  "statDescription"
);

export type PlasmicStat__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  h2?: Flex__<"h2">;
  text?: Flex__<"div">;
};

export interface DefaultStatProps {
  statTitle?: string;
  statDescription?: string;
  display?: SingleChoiceArg<"one" | "two" | "three" | "four">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStat__RenderFunc(props: {
  variants: PlasmicStat__VariantsArgs;
  args: PlasmicStat__ArgsType;
  overrides: PlasmicStat__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          statTitle: "Title",
          statDescription: "Stat Explained"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "display",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.display
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__zbchQ)}>
        <div className={classNames(projectcss.all, sty.freeBox___9FFrc)}>
          <PlasmicIcon__
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            PlasmicIconType={
              hasVariant($state, "display", "four")
                ? Icon20Icon
                : hasVariant($state, "display", "three")
                ? Icon17Icon
                : hasVariant($state, "display", "two")
                ? Icon19Icon
                : hasVariant($state, "display", "one")
                ? Icon21Icon
                : Icon15Icon
            }
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgdisplay_four]: hasVariant($state, "display", "four"),
              [sty.svgdisplay_one]: hasVariant($state, "display", "one"),
              [sty.svgdisplay_three]: hasVariant($state, "display", "three"),
              [sty.svgdisplay_two]: hasVariant($state, "display", "two")
            })}
            role={"img"}
          />
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__uFNo)}>
        <h2
          data-plasmic-name={"h2"}
          data-plasmic-override={overrides.h2}
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.statTitle;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Simple";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h2>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__minsL)}>
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.statDescription;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "These items are in a horizontal stack.";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "h2", "text"],
  svg: ["svg"],
  h2: ["h2"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  h2: "h2";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStat__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStat__VariantsArgs;
    args?: PlasmicStat__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStat__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStat__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStat__ArgProps,
          internalVariantPropNames: PlasmicStat__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStat__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStat";
  } else {
    func.displayName = `PlasmicStat.${nodeName}`;
  }
  return func;
}

export const PlasmicStat = Object.assign(
  // Top-level PlasmicStat renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    h2: makeNodeComponent("h2"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicStat
    internalVariantProps: PlasmicStat__VariantProps,
    internalArgProps: PlasmicStat__ArgProps
  }
);

export default PlasmicStat;
/* prettier-ignore-end */
