// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eyT2PqiWhxDZs7CQ7z9Crs
// Component: iWQkE3NKXCME

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantssoy5WCj6EAlp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Soy5WCj6EAlp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: eyT2PqiWhxDZs7CQ7z9Crs/projectcss
import sty from "./PlasmicProcessList.module.css"; // plasmic-import: iWQkE3NKXCME/css

createPlasmicElementProxy;

export type PlasmicProcessList__VariantMembers = {
  position: "top" | "middle" | "bottom";
};
export type PlasmicProcessList__VariantsArgs = {
  position?: SingleChoiceArg<"top" | "middle" | "bottom">;
};
type VariantPropType = keyof PlasmicProcessList__VariantsArgs;
export const PlasmicProcessList__VariantProps = new Array<VariantPropType>(
  "position"
);

export type PlasmicProcessList__ArgsType = {
  processStep?: string;
  processTitle?: string;
  processDescription?: string;
};
type ArgPropType = keyof PlasmicProcessList__ArgsType;
export const PlasmicProcessList__ArgProps = new Array<ArgPropType>(
  "processStep",
  "processTitle",
  "processDescription"
);

export type PlasmicProcessList__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  h3?: Flex__<"h3">;
  text?: Flex__<"div">;
};

export interface DefaultProcessListProps {
  processStep?: string;
  processTitle?: string;
  processDescription?: string;
  position?: SingleChoiceArg<"top" | "middle" | "bottom">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProcessList__RenderFunc(props: {
  variants: PlasmicProcessList__VariantsArgs;
  args: PlasmicProcessList__ArgsType;
  overrides: PlasmicProcessList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          processStep: "00",
          processTitle: "Process Title",
          processDescription: "ABC"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "position",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.position
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssoy5WCj6EAlp()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootposition_bottom]: hasVariant($state, "position", "bottom"),
          [sty.rootposition_middle]: hasVariant($state, "position", "middle"),
          [sty.rootposition_top]: hasVariant($state, "position", "top")
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__qWwI9, {
          [sty.freeBoxposition_bottom__qWwI9Fi08H]: hasVariant(
            $state,
            "position",
            "bottom"
          ),
          [sty.freeBoxposition_middle__qWwI9VS0U]: hasVariant(
            $state,
            "position",
            "middle"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__oh6Ye)}>
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.processStep;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "You won't believe what happens next.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h1>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__gm80H)}>
          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.processTitle;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "You won't believe what happens next.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h3>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___4GlP2)}>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textposition_middle]: hasVariant(
                  $state,
                  "position",
                  "middle"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.processDescription;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "h3", "text"],
  h1: ["h1"],
  h3: ["h3"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  h3: "h3";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProcessList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProcessList__VariantsArgs;
    args?: PlasmicProcessList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProcessList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProcessList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProcessList__ArgProps,
          internalVariantPropNames: PlasmicProcessList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProcessList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProcessList";
  } else {
    func.displayName = `PlasmicProcessList.${nodeName}`;
  }
  return func;
}

export const PlasmicProcessList = Object.assign(
  // Top-level PlasmicProcessList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    h3: makeNodeComponent("h3"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicProcessList
    internalVariantProps: PlasmicProcessList__VariantProps,
    internalArgProps: PlasmicProcessList__ArgProps
  }
);

export default PlasmicProcessList;
/* prettier-ignore-end */
