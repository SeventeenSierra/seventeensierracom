// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eyT2PqiWhxDZs7CQ7z9Crs
// Component: mei7JbA8WuD_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { DataProvider } from "@plasmicpkgs/plasmic-basic-components";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import SiteButton from "../../SiteButton"; // plasmic-import: UomJikB-MHPg/component
import ServiceCard from "../../ServiceCard"; // plasmic-import: 8_CPeh1dPohW/component
import Stat from "../../Stat"; // plasmic-import: Ej8Oq67_Ed88/component
import IndustryCard from "../../IndustryCard"; // plasmic-import: L3iC9rlhtakQ/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import TestimonialCard from "../../TestimonialCard"; // plasmic-import: OeuHltNxsDAr/component
import ProcessList from "../../ProcessList"; // plasmic-import: iWQkE3NKXCME/component

import { useScreenVariants as useScreenVariantssoy5WCj6EAlp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Soy5WCj6EAlp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: eyT2PqiWhxDZs7CQ7z9Crs/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: mei7JbA8WuD_/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: inx-D0cTgs9o/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: ssvaBdYAmd5k/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: MCuNvozgOK68/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: 7DWjsRKm2b15/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: ARuKMzUkLQza/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: 1geHLc8FuYXd/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: 2bQWtG7VlKIi/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  dataProvider?: Flex__<typeof DataProvider>;
  navigationBar?: Flex__<typeof NavigationBar>;
  hero?: Flex__<"div">;
  h1?: Flex__<"h1">;
  aboutUs?: Flex__<"div">;
  ourServices?: Flex__<"div">;
  foreground?: Flex__<"div">;
  foreground2?: Flex__<"div">;
  stats?: Flex__<"div">;
  stat?: Flex__<typeof Stat>;
  industries?: Flex__<"div">;
  industryCards?: Flex__<"div">;
  industryCard?: Flex__<typeof IndustryCard>;
  testimonials?: Flex__<"div">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  testimonialCard?: Flex__<typeof TestimonialCard>;
  process?: Flex__<"div">;
  processList?: Flex__<typeof ProcessList>;
  copy?: Flex__<"div">;
  foooter?: Flex__<"div">;
  h4?: Flex__<"h4">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "featureFlag",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssoy5WCj6EAlp()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <DataProvider
            data-plasmic-name={"dataProvider"}
            data-plasmic-override={overrides.dataProvider}
            className={classNames("__wab_instance", sty.dataProvider)}
            data={(() => {
              try {
                return {
                  navBar: [
                    {
                      link: "about-us",
                      content: "About Us"
                    },
                    {
                      link: "services",
                      content: "Our Services"
                    },
                    {
                      link: "contact-us",
                      content: "Let's Talk"
                    }
                  ],

                  heroSection: [
                    {
                      title: "Discover Tailored Solutions",
                      content:
                        "Empower your organization with strategies that seamlessly integrate technology, compliance, and business objectives. Explore our services to build a secure, sustainable future with confidence.",
                      button: "Read More"
                    },
                    {
                      title: "Partner with Us Today",
                      content:
                        "Redefine your governance, security, and engagement strategies with expert guidance from Seventeen Sierra. Schedule your consultation now and turn your vision into reality.",
                      button: "Book Now"
                    }
                  ],

                  aboutSection: [
                    {
                      title: "Our Why, Your Security",
                      subtitle:
                        "Turning complexity into confidence, one secure system at a time",
                      content:
                        'At Seventeen Sierra, we believe security isn\'t just a checkbox—it is a mindset. Born from a dream to do more than just "compliance paperwork," Alyssa Feola sets out to help businesses weave security and compliance into every part of their journey. From system designs to final approvals, we make the complicated simple and the essential seamless.\n\nNamed after the U.S. Air Force cyber officer code "17S", Seventeen Sierra represents the aspiration to push boundaries in cybersecurity. While no system is ever 100% secure, we believe that practical, thoughtfully designed security is the foundation of success. At Seventeen Sierra, we bridge the gap between compliance requirements and real-world security needs, empowering organizations to thrive in a complex digital landscape.',
                      button: "About Us"
                    }
                  ],

                  ourServices: [
                    {
                      title: "Our Services",
                      content:
                        "At Seventeen Sierra, we offer a suite of specialized services designed to empower your organization to thrive in today’s complex and evolving technological landscape. Whether you're building a secure foundation, enabling teams, or elevating your strategic vision, we deliver tailored solutions to meet your goals.",
                      button: "Book Now",
                      services: {
                        groupOne: [
                          {
                            title: "Governance, Regulations & Compliance",
                            content:
                              "We help organizations establish strong governance practices and compliance frameworks that meet industry standards, mitigate risks, and drive operational excellence."
                          },
                          {
                            title: "Product Security",
                            content:
                              "Our services empower development teams and ensure product security through comprehensive enablement programs and governance strategies that safeguard every stage of the development lifecycle."
                          }
                        ],

                        groupTwo: [
                          {
                            title: "Strategic Services",
                            content:
                              "We provide high-level advisory and leadership services, including security strategy creation, virtual CISO solutions, and executive communication support, to help your organization thrive in an ever-changing landscape."
                          },
                          {
                            title: "Engagement & Enablement",
                            content:
                              "We enhance communication and training through tailored strategies, internal compliance programs, and toolkits designed to foster awareness, trust, and effective engagement with clients and teams."
                          }
                        ],

                        groupOne: [
                          {
                            title: "Governance, Regulations & Compliance",
                            content:
                              "We help organizations establish strong governance practices and compliance frameworks that meet industry standards, mitigate risks, and drive operational excellence."
                          },
                          {
                            title: "Product Security",
                            content:
                              "Our services empower development teams and ensure product security through comprehensive enablement programs and governance strategies that safeguard every stage of the development lifecycle."
                          }
                        ],

                        groupThree: [
                          {
                            title: "Visual Software Development",
                            content:
                              "We provide high-level advisory and leadership services, including security strategy creation, virtual CISO solutions, and executive communication support, to help your organization thrive in an ever-changing landscape."
                          },
                          {
                            title: "Project Management",
                            content:
                              "We enhance communication and training through tailored strategies, internal compliance programs, and toolkits designed to foster awareness, trust, and effective engagement with clients and teams."
                          }
                        ]
                      }
                    }
                  ],

                  ourStats: [
                    {
                      title: "Driving Excellence, Securing Results",
                      stats: [
                        {
                          display: "one",
                          stat: "189",
                          descriptoin: "Services Offered"
                        },
                        {
                          display: "two",
                          stat: "+90%",
                          descriptoin: "Client Retention"
                        },

                        {
                          display: "three",
                          stat: "80+",
                          descriptoin: "ATOs Supported"
                        },
                        {
                          display: "four",
                          stat: "18",
                          descriptoin: "Years of Experience"
                        }
                      ]
                    }
                  ],

                  ourIndustries: {
                    title: "Industries",
                    industries: [
                      {
                        title: "Government-Focused Innovators",
                        content:
                          "We partner with startups and established businesses in programs like SBIR, the Defense Industrial Base (DIB), and Federal SBA initiatives. Whether you're entering the federal space or expanding your government contracts, we help you secure the trust and compliance required to thrive."
                      },
                      {
                        title: "Regulated Industries",
                        content:
                          "For industries with complex regulatory frameworks, including technology, defense, and manufacturing, we offer the expertise to navigate FedRAMP, CMMC, RMF, CSF, and SSDF processes. Our services ensure your systems, products, and networks are secure by design and meet compliance demands."
                      },
                      {
                        title: "Product-Driven Companies",
                        content:
                          "If your company builds products designed to help others meet compliance requirements or enhance security, we provide tailored support to ensure your offerings meet government and enterprise expectations."
                      },
                      {
                        title: "Policy & Tech Hubs",
                        content:
                          "Serving businesses in policy-heavy areas like Washington, DC, and tech-centric hubs such as Boston, Silicon Valley, New York, and Austin, we’re strategically positioned to support clients navigating the evolving intersection of government and technology."
                      }
                    ]
                  },
                  ourProcess: {
                    title: "Process",
                    subtitle: "The simple method behind our success",
                    process: [
                      {
                        step: "01",
                        title: "Discovery and Client Collaboration",
                        description:
                          "We begin by immersing ourselves in your organization. This phase requires your input to gather essential materials—such as policies, processes, or existing documentation. By collaborating with key stakeholders through asynchronous communication, real-time messaging, or scheduled workshops, we build a shared understanding of your needs.",
                        position: "top"
                      },
                      {
                        step: "02",
                        title: "Tailored Analysis and Strategy",
                        description:
                          "Using a flexible service base, we tailor solutions to fit your unique requirements. Our practitioner’s extensive experience, paired with tools like spreadsheets and generative AI systems, allows us to analyze your data, identify irregularities, and create a customized strategy—all while maintaining the adaptability to adjust within the agreed service framework.",
                        position: "middle"
                      },
                      {
                        step: "03",
                        title: "Implementation and Enablement",
                        description:
                          "With the strategy in place, we implement solutions collaboratively, working alongside your teams in your preferred collaboration environment. From hour-long sessions to full-day workshops, we remain flexible to meet your needs, enabling your stakeholders with the knowledge and tools to succeed.",
                        position: "middle"
                      },
                      {
                        step: "04",
                        title: "Ongoing Support and Optimization",
                        description:
                          "Our partnership doesn’t end at implementation. We provide continued advisory support, helping you adapt to evolving regulations and security needs while ensuring sustained compliance and operational success.",
                        position: "bottom"
                      }
                    ]
                  },
                  ourTestimonials: [
                    {
                      content:
                        "Seventeen Sierra expertly reviewed our policies, identifying key updates needed to meet evolving regulations. Alyssa’s recommendations were insightful and actionable, helping us streamline compliance and stay ahead of changes. Her expertise made a significant impact.",
                      personName: "Rebecca M.",
                      personCompany: "Government Contractor"
                    },
                    {
                      content:
                        "Alyssa’s project management brought clarity and structure to our initiatives. Her leadership kept us on track, met deadlines, and delivered great results. We couldn’t have achieved the same success without her guidance.",
                      personName: "Elizabeth B.",
                      personCompany: "Industry Expert"
                    },
                    {
                      content:
                        "Alyssa’s work as a Diversity, Equity, and Inclusion advisor was transformative. Her strategic insights helped us foster a more inclusive and welcoming community, leaving a lasting impact on our organization.",
                      personName: "Bethany B.",
                      personCompany: "Conference Organizer"
                    }
                  ]
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {
                    navBar: [
                      { link: "about-us", content: "About Us" },
                      { link: "services", content: "Our Services" },
                      { link: "contact-us", content: "Let's Talk" }
                    ],
                    heroSection: [
                      {
                        title: "Discover Tailored Solutions",
                        content:
                          "Empower your organization with strategies that seamlessly integrate technology, compliance, and business objectives. Explore our services to build a secure, sustainable future with confidence.",
                        button: "Read More"
                      },
                      {
                        title: "Partner with Us Today",
                        content:
                          "Redefine your governance, security, and engagement strategies with expert guidance from Seventeen Sierra. Schedule your consultation now and turn your vision into reality.",
                        button: "Book Now"
                      }
                    ],
                    aboutSection: [
                      {
                        title: "Our Why, Your Security",
                        subtitle:
                          "Turning complexity into confidence, on secure system at a time",
                        content:
                          'At Seventeen Sierra, we believe security isn\'t just a checkbox\u2014 it is a mindset. Born from a dream to do more than just \\"compliance paperwork,\\" Alyssa Feola sets out to help businesses weave security and compliance into every part of their journey. From system designs to final approvals, we make the complicated simple and the essential seamless. \n Named after the U.S. Air Force cyber officer code \\"17S,\\" Seventeen Sierra represents the aspiration to push boundaries in cybersecurity. While no system is ever 100% secure, we believe that practical, thoughtfully designed security is the foundation of success. At Seventeen Sierra, we bridge the gap between compliance requirements and real-world security needs, empowering organizations to thrive in a complex digital landscape.'
                      }
                    ]
                  };
                }
                throw e;
              }
            })()}
            name={"pageContent"}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <NavigationBar
                    data-plasmic-name={"navigationBar"}
                    data-plasmic-override={overrides.navigationBar}
                    brand={
                      <Stack__
                        as={PlasmicLink__}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__ymAqa
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__vF4FB)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "64px"
                              : "120px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "64px"
                              : "120px"
                          }
                          src={{
                            src: "/plasmic/17_s_website/images/_17SSmCirclePng.png",
                            fullWidth: 1220,
                            fullHeight: 1202,
                            aspectRatio: undefined
                          }}
                        />

                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__zh6U
                          )}
                        >
                          {"Seventeen \nSierra"}
                        </h2>
                      </Stack__>
                    }
                    className={classNames("__wab_instance", sty.navigationBar)}
                    closeButton={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__zSmGr)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={"https://static1.plasmic.app/close.svg"}
                      />
                    }
                    itemsGap={8}
                    menuItems={
                      (() => {
                        try {
                          return $state.featureFlag;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__e4YTy
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $ctx.pageContent.navBar;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <PlasmicLink__
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  projectcss.__wab_text,
                                  sty.link__qrpWa
                                )}
                                component={Link}
                                href={(() => {
                                  try {
                                    return currentItem.link;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "/";
                                    }
                                    throw e;
                                  }
                                })()}
                                key={currentIndex}
                                platform={"nextjs"}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.content;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Home";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </PlasmicLink__>
                            );
                          })}
                        </Stack__>
                      ) : null
                    }
                    openButton={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__bNphL)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={"https://static1.plasmic.app/menu.svg"}
                      />
                    }
                    responsiveBreakpoint={768}
                  />

                  <div
                    data-plasmic-name={"hero"}
                    data-plasmic-override={overrides.hero}
                    className={classNames(projectcss.all, sty.hero)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tckFo)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zY8St
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wFkoj
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__llgXr
                            )}
                          >
                            <h1
                              data-plasmic-name={"h1"}
                              data-plasmic-override={overrides.h1}
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1
                              )}
                            >
                              {
                                "Your trusted partner for compliance and security"
                              }
                            </h1>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yxSw
                            )}
                          >
                            <SiteButton
                              className={classNames(
                                "__wab_instance",
                                sty.siteButton___7DtLh
                              )}
                              endIcon={
                                <Icon38Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__nczi
                                  )}
                                  role={"img"}
                                />
                              }
                              shape={"rounded"}
                              startIcon={
                                <CheckSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__bB1Mw
                                  )}
                                  role={"img"}
                                />
                              }
                              submitsForm={true}
                            >
                              {"Get a Free Consultation"}
                            </SiteButton>
                          </Stack__>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oo6Ib
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uUiW9
                            )}
                          >
                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ciX8B
                              )}
                              role={"img"}
                            />

                            <Icon5Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hZpMr
                              )}
                              role={"img"}
                            />

                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__oj6Ea
                              )}
                              role={"img"}
                            />

                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__m4BJp
                              )}
                              role={"img"}
                            />

                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__eeNg1
                              )}
                              role={"img"}
                            />

                            <Icon5Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__iWSn7
                              )}
                              role={"img"}
                            />

                            <Icon5Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__c8FY
                              )}
                              role={"img"}
                            />

                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___0BSkL
                              )}
                              role={"img"}
                            />

                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__u1ZVs
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qaDtQ
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $ctx.pageContent.heroSection;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jjnYk
                              )}
                              key={currentIndex}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  projectcss.__wab_text,
                                  sty.h3__uxZAh
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "You won't believe what happens next.";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </h3>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5YrTd
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.content;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return $state.featureFlag;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___6Nwh9
                                  )}
                                >
                                  <SiteButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.siteButton__eOCi
                                    )}
                                    look={"ghost"}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.button;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Button";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </SiteButton>
                                </div>
                              ) : null}
                            </Stack__>
                          );
                        })}
                      </Stack__>
                    </div>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"aboutUs"}
                    data-plasmic-override={overrides.aboutUs}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.aboutUs)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__atk2A)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__w9UYd
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rpQh7
                          )}
                        >
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__ryIed
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.pageContent.aboutSection[0].title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Our Why, Your Security";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h2>
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__fo3Rf
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.pageContent.aboutSection[0]
                                    .subtitle;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Turning complexity into confidence, on secure system at a time";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h3>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hk4Kw
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.pageContent.aboutSection[0]
                                    .content;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(() => {
                            try {
                              return $state.featureFlag;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zYoq
                              )}
                            >
                              <SiteButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.siteButton__hvsN
                                )}
                                endIcon={
                                  <Icon38Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__aDqi6
                                    )}
                                    role={"img"}
                                  />
                                }
                                look={"outline"}
                                onColor={true}
                                startIcon={
                                  <CheckSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__cLza1
                                    )}
                                    role={"img"}
                                  />
                                }
                                submitsForm={true}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.pageContent.aboutSection[0]
                                        .button;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Start now ->";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </SiteButton>
                            </Stack__>
                          ) : null}
                        </Stack__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__tjOif
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vBeVv
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__clNLb
                            )}
                          />
                        </div>
                      </div>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"ourServices"}
                    data-plasmic-override={overrides.ourServices}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.ourServices)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__onfsH)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"foreground"}
                        data-plasmic-override={overrides.foreground}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.foreground)}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__zgBGp
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.pageContent.ourServices[0].title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Not just another design";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wBhDl
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.pageContent.ourServices[0].content;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "A euismod eros a hendrerit tristique suscipit sit aptent dolor adipiscing inceptos cras ullamcorper a vivamus parturient.";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return $state.featureFlag;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aKc96
                            )}
                          >
                            <SiteButton
                              className={classNames(
                                "__wab_instance",
                                sty.siteButton__sgIab
                              )}
                              hierarchy={"secondary"}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.pageContent.ourServices[0]
                                      .button;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Button";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </SiteButton>
                          </div>
                        ) : null}
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"foreground2"}
                        data-plasmic-override={overrides.foreground2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.foreground2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gXvwl
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $ctx.pageContent.ourServices[0].services;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <ServiceCard
                                className={classNames(
                                  "__wab_instance",
                                  sty.serviceCard__k8Vy
                                )}
                                key={currentIndex}
                                serviceCardContent={`Orci commodo maecenas fringilla ad nec amet tempus mattis platea eget tortor sit dolor etiam a ullamcorper varius.${currentItem.content}`}
                                serviceCardTitle={(() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eXz55
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__as8Sz
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $ctx.pageContent.ourServices[0]
                                    .services.groupOne;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rQrm
                                  )}
                                  key={currentIndex}
                                >
                                  <ServiceCard
                                    className={classNames(
                                      "__wab_instance",
                                      sty.serviceCard__cbzth
                                    )}
                                    serviceCardContent={(() => {
                                      try {
                                        return currentItem.content;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    serviceCardTitle={(() => {
                                      try {
                                        return currentItem.title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </Stack__>
                              );
                            })}
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___0Rmk8
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $ctx.pageContent.ourServices[0]
                                    .services.groupTwo;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__pYgjT
                                  )}
                                  key={currentIndex}
                                >
                                  <ServiceCard
                                    className={classNames(
                                      "__wab_instance",
                                      sty.serviceCard__bvPrr
                                    )}
                                    serviceCardContent={(() => {
                                      try {
                                        return currentItem.content;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    serviceCardTitle={(() => {
                                      try {
                                        return currentItem.title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </Stack__>
                              );
                            })}
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nVoV0
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $ctx.pageContent.ourServices[0]
                                    .services.groupThree;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__h1HEa
                                  )}
                                  key={currentIndex}
                                >
                                  <ServiceCard
                                    className={classNames(
                                      "__wab_instance",
                                      sty.serviceCard__eopKr
                                    )}
                                    serviceCardContent={(() => {
                                      try {
                                        return currentItem.content;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    serviceCardTitle={(() => {
                                      try {
                                        return currentItem.title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </Stack__>
                              );
                            })}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"stats"}
                    data-plasmic-override={overrides.stats}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.stats)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__go4Gi)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__aN4CA
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.pageContent.ourStats[0].title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "You won't believe what happens next.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h2>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3Qwf2
                      )}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.pageContent.ourStats[0].stats;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Stat
                            data-plasmic-name={"stat"}
                            data-plasmic-override={overrides.stat}
                            className={classNames("__wab_instance", sty.stat)}
                            display={(() => {
                              try {
                                return currentItem.display;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            statDescription={(() => {
                              try {
                                return currentItem.descriptoin;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            statTitle={(() => {
                              try {
                                return currentItem.stat;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        );
                      })}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"industries"}
                    data-plasmic-override={overrides.industries}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.industries)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__fBs3D
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $ctx.pageContent.ourServices[0].title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Not just another design";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h2>
                    <div
                      data-plasmic-name={"industryCards"}
                      data-plasmic-override={overrides.industryCards}
                      className={classNames(projectcss.all, sty.industryCards)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.pageContent.ourIndustries.industries;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <IndustryCard
                            data-plasmic-name={"industryCard"}
                            data-plasmic-override={overrides.industryCard}
                            className={classNames(
                              "__wab_instance",
                              sty.industryCard
                            )}
                            industryCardContent={`Orci commodo maecenas fringilla ad nec amet tempus mattis platea eget tortor sit dolor etiam a ullamcorper varius.${currentItem.content}`}
                            industryCardTitle={(() => {
                              try {
                                return currentItem.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                          />
                        );
                      })}
                    </div>
                  </Stack__>
                  <div
                    data-plasmic-name={"testimonials"}
                    data-plasmic-override={overrides.testimonials}
                    className={classNames(projectcss.all, sty.testimonials)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__b1NIv)}
                    >
                      {(() => {
                        const child$Props = {
                          adaptiveHeight: false,
                          arrowColor: true ? "#72FFFF" : undefined,
                          arrows: true,
                          beforeChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "currentSlide",
                              ["sliderCarousel", "currentSlide"],
                              SliderWrapper_Helpers
                            ),
                          centerMode: false,
                          className: classNames(
                            "__wab_instance",
                            sty.sliderCarousel
                          ),
                          dots: false,
                          initialSlide: generateStateValueProp($state, [
                            "sliderCarousel",
                            "currentSlide"
                          ]),
                          ref: ref => {
                            $refs["sliderCarousel"] = ref;
                          },
                          sliderScopeClassName: sty["sliderCarousel__slider"]
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "currentSlide",
                              plasmicStateName: "sliderCarousel.currentSlide"
                            }
                          ],
                          [],
                          SliderWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <SliderWrapper
                            data-plasmic-name={"sliderCarousel"}
                            data-plasmic-override={overrides.sliderCarousel}
                            {...child$Props}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $ctx.pageContent.ourTestimonials;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__cFyIc
                                  )}
                                  key={currentIndex}
                                >
                                  <TestimonialCard
                                    data-plasmic-name={"testimonialCard"}
                                    data-plasmic-override={
                                      overrides.testimonialCard
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.testimonialCard
                                    )}
                                    testimonialCardContent={(() => {
                                      try {
                                        return currentItem.content;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    testimonialPersonCompany={(() => {
                                      try {
                                        return currentItem.personCompany;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    testimonialPersonName={(() => {
                                      try {
                                        return currentItem.personName;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                              );
                            })}
                          </SliderWrapper>
                        );
                      })()}
                    </div>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"process"}
                    data-plasmic-override={overrides.process}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.process)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7JeOf
                      )}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__rp1I0
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.pageContent.ourProcess.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "You won't believe what happens next.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h2>
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___3Lav
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.pageContent.ourProcess.subtitle;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "You won't believe what happens next.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h3>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cq5Xv)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.pageContent.ourProcess.process;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <ProcessList
                            data-plasmic-name={"processList"}
                            data-plasmic-override={overrides.processList}
                            className={classNames(
                              "__wab_instance",
                              sty.processList
                            )}
                            key={currentIndex}
                            position={(() => {
                              try {
                                return currentItem.position;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            processDescription={(() => {
                              try {
                                return currentItem.description;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            processStep={(() => {
                              try {
                                return currentItem.step;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            processTitle={(() => {
                              try {
                                return currentItem.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        );
                      })}
                    </div>
                  </Stack__>
                  {(() => {
                    try {
                      return $state.featureFlag;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gxTg)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__d14EA
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___36Hdd
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__vefFb
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vlzNj
                            )}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"copy"}
                              data-plasmic-override={overrides.copy}
                              hasGap={true}
                              className={classNames(projectcss.all, sty.copy)}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__hx4Hi
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__c4ANw
                                  )}
                                >
                                  {"Welcome"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__vrD05
                                  )}
                                >
                                  {"Let's get going"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___5A9BE
                                  )}
                                >
                                  {
                                    "Consectetur a adipiscing sagittis sed proin libero himenaeos ornare adipiscing suscipit leo vestibulum facilisi consequat nisi nisi adipiscing habitant facilisis suspendisse hac integer eget quam facilisis sem placerat fames."
                                  }
                                </div>
                              </Stack__>
                              {(() => {
                                try {
                                  return $state.featureFlag;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__p8Uag
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return true;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <SiteButton
                                      className={classNames(
                                        "__wab_instance",
                                        sty.siteButton__zosh1
                                      )}
                                      endIcon={
                                        <Icon38Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg___7Xv0R
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      startIcon={
                                        <CheckSvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__cjRlz
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      submitsForm={true}
                                    >
                                      {"Start now ->"}
                                    </SiteButton>
                                  ) : null}
                                  <SiteButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.siteButton__vSJl
                                    )}
                                    endIcon={
                                      <Icon38Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___179Op
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    startIcon={
                                      <CheckSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__gLxIt
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    submitsForm={true}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__btWq
                                      )}
                                    >
                                      {"Learn more\u2026"}
                                    </div>
                                  </SiteButton>
                                </Stack__>
                              ) : null}
                            </Stack__>
                          </Stack__>
                        </div>
                      </div>
                    </Stack__>
                  ) : null}
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"foooter"}
                    data-plasmic-override={overrides.foooter}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.foooter)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__jlSmF)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rrg5
                        )}
                      >
                        <h4
                          data-plasmic-name={"h4"}
                          data-plasmic-override={overrides.h4}
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4
                          )}
                        >
                          {"Contact"}
                        </h4>
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__euIy2
                          )}
                        >
                          {"Let's work together"}
                        </h3>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___8QYyE
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tttdT
                            )}
                          >
                            {"Washington, DC 20002"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2QMcu
                            )}
                          >
                            {"info@seventeensierra.com"}
                          </div>
                        </Stack__>
                        {(() => {
                          try {
                            return $state.featureFlag;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__cqgst
                            )}
                          >
                            <Icon22Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hSNqp
                              )}
                              role={"img"}
                            />

                            <Icon23Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___8VsKg
                              )}
                              role={"img"}
                            />

                            <Icon28Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__lygCq
                              )}
                              role={"img"}
                            />
                          </Stack__>
                        ) : null}
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </DataProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dataProvider",
    "navigationBar",
    "hero",
    "h1",
    "aboutUs",
    "ourServices",
    "foreground",
    "foreground2",
    "stats",
    "stat",
    "industries",
    "industryCards",
    "industryCard",
    "testimonials",
    "sliderCarousel",
    "testimonialCard",
    "process",
    "processList",
    "copy",
    "foooter",
    "h4"
  ],
  dataProvider: [
    "dataProvider",
    "navigationBar",
    "hero",
    "h1",
    "aboutUs",
    "ourServices",
    "foreground",
    "foreground2",
    "stats",
    "stat",
    "industries",
    "industryCards",
    "industryCard",
    "testimonials",
    "sliderCarousel",
    "testimonialCard",
    "process",
    "processList",
    "copy",
    "foooter",
    "h4"
  ],
  navigationBar: ["navigationBar"],
  hero: ["hero", "h1"],
  h1: ["h1"],
  aboutUs: ["aboutUs"],
  ourServices: ["ourServices", "foreground", "foreground2"],
  foreground: ["foreground"],
  foreground2: ["foreground2"],
  stats: ["stats", "stat"],
  stat: ["stat"],
  industries: ["industries", "industryCards", "industryCard"],
  industryCards: ["industryCards", "industryCard"],
  industryCard: ["industryCard"],
  testimonials: ["testimonials", "sliderCarousel", "testimonialCard"],
  sliderCarousel: ["sliderCarousel", "testimonialCard"],
  testimonialCard: ["testimonialCard"],
  process: ["process", "processList"],
  processList: ["processList"],
  copy: ["copy"],
  foooter: ["foooter", "h4"],
  h4: ["h4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dataProvider: typeof DataProvider;
  navigationBar: typeof NavigationBar;
  hero: "div";
  h1: "h1";
  aboutUs: "div";
  ourServices: "div";
  foreground: "div";
  foreground2: "div";
  stats: "div";
  stat: typeof Stat;
  industries: "div";
  industryCards: "div";
  industryCard: typeof IndustryCard;
  testimonials: "div";
  sliderCarousel: typeof SliderWrapper;
  testimonialCard: typeof TestimonialCard;
  process: "div";
  processList: typeof ProcessList;
  copy: "div";
  foooter: "div";
  h4: "h4";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dataProvider: makeNodeComponent("dataProvider"),
    navigationBar: makeNodeComponent("navigationBar"),
    hero: makeNodeComponent("hero"),
    h1: makeNodeComponent("h1"),
    aboutUs: makeNodeComponent("aboutUs"),
    ourServices: makeNodeComponent("ourServices"),
    foreground: makeNodeComponent("foreground"),
    foreground2: makeNodeComponent("foreground2"),
    stats: makeNodeComponent("stats"),
    stat: makeNodeComponent("stat"),
    industries: makeNodeComponent("industries"),
    industryCards: makeNodeComponent("industryCards"),
    industryCard: makeNodeComponent("industryCard"),
    testimonials: makeNodeComponent("testimonials"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    testimonialCard: makeNodeComponent("testimonialCard"),
    process: makeNodeComponent("process"),
    processList: makeNodeComponent("processList"),
    copy: makeNodeComponent("copy"),
    foooter: makeNodeComponent("foooter"),
    h4: makeNodeComponent("h4"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
